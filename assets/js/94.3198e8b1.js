(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{215:function(t,e,a){"use strict";a.r(e);var s=a(0),i=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"flutter-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flutter-概念","aria-hidden":"true"}},[t._v("#")]),t._v(" Flutter 概念")]),t._v(" "),a("h2",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构")]),t._v(" "),a("p",[t._v("以默认创建的 demo 为例子")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("MyApp类代表Flutter应用，它继承了 StatelessWidget类，这也就意味着应用本身也是一个widget。")])]),t._v(" "),a("li",[a("p",[t._v("在Flutter中，大多数东西都是widget，包括对齐(alignment)、填充(padding)和布局(layout)。")])]),t._v(" "),a("li",[a("p",[t._v("Flutter在构建页面时，会调用组件的build方法，widget的主要工作是提供一个build()方法来描述如何构建UI界面（通常是通过组合、拼装其它基础widget）。")])]),t._v(" "),a("li",[a("p",[t._v("MaterialApp 是Material库中提供的Flutter APP框架，通过它可以设置应用的名称、主题、语言、首页及路由列表等。MaterialApp也是一个widget。")])]),t._v(" "),a("li",[a("p",[t._v("Scaffold 是Material库中提供的页面脚手架，它包含导航栏和Body以及FloatingActionButton（如果需要的话）。 路由默认都是通过Scaffold创建。")])]),t._v(" "),a("li",[a("p",[t._v("home 为Flutter应用的首页，它也是一个widget。")])])]),t._v(" "),a("h2",{attrs:{id:"widget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#widget","aria-hidden":"true"}},[t._v("#")]),t._v(" widget")]),t._v(" "),a("ul",[a("li",[t._v("Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。")]),t._v(" "),a("li",[t._v("一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。")])]),t._v(" "),a("h2",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),a("h2",{attrs:{id:"stateful-和stateless-不同："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stateful-和stateless-不同：","aria-hidden":"true"}},[t._v("#")]),t._v(" Stateful 和Stateless 不同：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Stateful widget可以拥有状态，这些状态在widget生命周期中是可以变的，而Stateless widget是不可变的。")])]),t._v(" "),a("li",[a("p",[t._v("Stateful widget至少由两个类组成：")]),t._v(" "),a("ul",[a("li",[t._v("一个StatefulWidget类。")]),t._v(" "),a("li",[t._v("一个 State类； StatefulWidget类本身是不变的，但是 State类中持有的状态在widget生命周期中可能会发生变化。\n_MyHomePageState类是MyHomePage类对应的状态类。和MyApp 类不同， MyHomePage类中并没有build方法，取而代之的是，build方法被挪到了_MyHomePageState方法中")])])])]),t._v(" "),a("p",[t._v("一个StatefulWidget类会对应一个State类，State表示与其对应的StatefulWidget要维护的状态，State中的保存的状态信息可以：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在widget build时可以被同步读取。\n在widget生命周期中可以被改变，当State被改变时，可以手动调用其setState()方法通知Flutter framework状态发生改变，Flutter framework在收到消息后，会重新调用其build方法重新构建widget树，从而达到更新UI的目的。\nState中有两个常用属性：")])]),t._v(" "),a("li",[a("p",[t._v("widget，它表示与该State实例关联的widget实例，由Flutter framework动态设置。注意，这种关联并非永久的，因为在应用声明周期中，UI树上的某一个节点的widget实例在重新构建时可能会变化，但State实例只会在第一次插入到树中时被创建，当在重新构建时，如果widget被修改了，Flutter framework会动态设置State.widget为新的widget实例。")])]),t._v(" "),a("li",[a("p",[t._v("context，它是BuildContext类的一个实例，表示构建widget的上下文，它是操作widget在树中位置的一个句柄，它包含了一些查找、遍历当前Widget树的一些方法。每一个widget都有一个自己的context对象。")])]),t._v(" "),a("li",[a("p",[t._v("对于BuildContext读者现在可以先作了解，随着本书后面内容的展开，也会用到Context的一些方法，读者可以通过具体的场景对其有个直观的认识。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("对于StatefulWidget，将build方法放在State中，可以给开发带来很大的灵活性。")])]),t._v(" "),a("h2",{attrs:{id:"state-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" state 生命周期")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("initState：当Widget第一次插入到Widget树时会被调用，对于每一个State对象，Flutter framework只会调用一次该回调，所以，通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等。不能在该回调中调用BuildContext.inheritFromWidgetOfExactType（该方法用于在Widget树上获取离当前widget最近的一个父级InheritFromWidget，关于InheritedWidget我们将在后面章节介绍），原因是在初始化完成后，Widget树中的InheritFromWidget也可能会发生变化，所以正确的做法应该在在build（）方法或didChangeDependencies()中调用它。")])]),t._v(" "),a("li",[a("p",[t._v("didChangeDependencies()：当State对象的依赖发生变化时会被调用；例如：在之前build() 中包含了一个InheritedWidget，然后在之后的build() 中InheritedWidget发生了变化，那么此时InheritedWidget的子widget的didChangeDependencies()回调都会被调用。典型的场景是当系统语言Locale或应用主题改变时，Flutter framework会通知widget调用此回调。\nbuild()：此回调读者现在应该已经相当熟悉了，它主要是用于构建Widget子树的，会在如下场景被调用：")]),t._v(" "),a("ol",[a("li",[t._v("在调用initState()之后。")]),t._v(" "),a("li",[t._v("在调用didUpdateWidget()之后。")]),t._v(" "),a("li",[t._v("在调用setState()之后。")]),t._v(" "),a("li",[t._v("在调用didChangeDependencies()之后。")]),t._v(" "),a("li",[t._v("在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。")])])]),t._v(" "),a("li",[a("p",[t._v("reassemble()：此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，此回调在Release模式下永远不会被调用。")])]),t._v(" "),a("li",[a("p",[t._v("didUpdateWidget()：在widget重新构建时，Flutter framework会调用Widget.canUpdate来检测Widget树中同一位置的新旧节点，然后决定是否需要更新，如果Widget.canUpdate返回true则会调用此回调。正如之前所述，Widget.canUpdate会在新旧widget的key和runtimeType同时相等时会返回true，也就是说在在新旧widget的key和runtimeType同时相等时didUpdateWidget()就会被调用。")])]),t._v(" "),a("li",[a("p",[t._v("deactivate()：当State对象从树中被移除时，会调用此回调。在一些场景下，Flutter framework会将State对象重新插到树中，如包含此State对象的子树在树的一个位置移动到另一个位置时（可以通过GlobalKey来实现）。如果移除后没有重新插入到树中则紧接着会调用dispose()方法。")])]),t._v(" "),a("li",[a("p",[t._v("dispose()：当State对象从树中被永久移除时调用；通常在此回调中释放资源。")])])]),t._v(" "),a("h2",{attrs:{id:"状态管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态管理")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果状态是用户数据，如复选框的选中状态、滑块的位置，则该状态最好由父widget管理。")])]),t._v(" "),a("li",[a("p",[t._v("如果状态是有关界面外观效果的，例如颜色、动画，那么状态最好由widget本身来管理。")])]),t._v(" "),a("li",[a("p",[t._v("如果某一个状态是不同widget共享的则最好由它们共同的父widget管理。")])])]),t._v(" "),a("p",[t._v("在widget内部管理状态封装性会好一些，而在父widget中管理会比较灵活。有些时候，如果不确定到底该怎么管理状态，那么推荐的首选是在父widget中管理（灵活会显得更重要一些）。")]),t._v(" "),a("h2",{attrs:{id:"scaffold-布局脚手架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-布局脚手架","aria-hidden":"true"}},[t._v("#")]),t._v(" Scaffold 布局脚手架")]),t._v(" "),a("div",{staticClass:"language-dart extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scaffold")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatefulWidget")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Creates a visual scaffold for material design widgets.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scaffold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Key key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("appBar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floatingActionButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floatingActionButtonLocation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floatingActionButtonAnimator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("persistentFooterButtons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drawer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endDrawer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomNavigationBar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bottomSheet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resizeToAvoidBottomPadding "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("primary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"widget-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#widget-分类","aria-hidden":"true"}},[t._v("#")]),t._v(" widget 分类")]),t._v(" "),a("p",[t._v("根据Widget是否需要包含子节点将Widget分为了三类，分别对应三种Element，如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("LeafRenderObjectWidget, LeafRenderObjectElement Widget树的叶子节点，用于没有子节点的widget，通常基础widget都属于这一类，如Text、Image。")])]),t._v(" "),a("li",[a("p",[t._v("SingleChildRenderObjectWidget,SingleChildRenderObjectElement 包含一个子Widget，如：ConstrainedBox、DecoratedBox等")])]),t._v(" "),a("li",[a("p",[t._v("MultiChildRenderObjectWidget,MultiChildRenderObjectElement 包含多个子Widget，一般都有一个children参数，接受一个Widget数组。如Row、Column、Stack等")])])]),t._v(" "),a("h2",{attrs:{id:"布局类和容器类的-widget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局类和容器类的-widget","aria-hidden":"true"}},[t._v("#")]),t._v(" 布局类和容器类的 widget")]),t._v(" "),a("p",[t._v("容器类Widget和布局类Widget都作用于其子Widget，不同的是：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("布局类Widget一般都需要接收一个widget数组（children），他们直接或间接继承自（或包含）MultiChildRenderObjectWidget ；而容器类Widget一般只需要接受一个子Widget（child），他们直接或间接继承自（或包含）SingleChildRenderObjectWidget。")])]),t._v(" "),a("li",[a("p",[t._v("布局类Widget是按照一定的排列方式来对其子Widget进行排列；而容器类Widget一般只是包装其子Widget，对其添加一些修饰（补白或背景色等）、变换(旋转或剪裁等)、或限制(大小等)。")])])]),t._v(" "),a("h2",{attrs:{id:"功能型widget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能型widget","aria-hidden":"true"}},[t._v("#")]),t._v(" 功能型Widget")]),t._v(" "),a("p",[t._v("指的是不会影响UI布局及外观的Widget，它们通常具有一定的功能，如事件监听、数据存储等，我们之前介绍过的FocusScope（焦点控制）、PageStorage（数据存储）、NotificationListener（事件监听）都属于功能型Widget。由于Widget是Flutter的一等公民，功能型Widget非常多")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("导航返回拦截WillPopScope")])]),t._v(" "),a("li",[a("p",[t._v("InheritedWidget是Flutter中非常重要的一个功能型Widget，它可以高效的将数据在Widget树中向下传递、共享，这在一些需要在Widget树中共享数据的场景中非常方便，如Flutter中，正是通过InheritedWidget来共享应用主题(Theme)和Locale(当前语言环境)信息的。")])]),t._v(" "),a("li",[a("p",[t._v("主题\nTheme Widget可以为Material APP定义主题数据（ThemeData），Material组件库里很多Widget都使用了主题数据，如导航栏颜色、标题字体、Icon样式等。Theme内会使用InheritedWidget来为其子树Widget共享样式数据。")])])]),t._v(" "),a("h2",{attrs:{id:"动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动画","aria-hidden":"true"}},[t._v("#")]),t._v(" 动画")]),t._v(" "),a("p",[t._v("vsync 是什么？")]),t._v(" "),a("p",[t._v("vsync对象会绑定动画的定时器到一个可视的widget，所以当widget不显示时，动画定时器将会暂停，当widget再次显示时，动画定时器重新恢复执行，这样就可以避免动画相关UI不在当前屏幕时消耗资源。 如果要使用自定义的State对象作为vsync时，请包含TickerProviderStateMixin")]),t._v(" "),a("h2",{attrs:{id:"scrollview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrollview","aria-hidden":"true"}},[t._v("#")]),t._v(" Scrollview")]),t._v(" "),a("h3",{attrs:{id:"customscrollview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#customscrollview","aria-hidden":"true"}},[t._v("#")]),t._v(" CustomScrollView")]),t._v(" "),a("p",[t._v('CustomScrollView是可以使用sliver来自定义滚动模型（效果）的widget。它可以包含多种滚动模型，举个例子，假设有一个页面，顶部需要一个GridView，底部需要一个ListView，而要求整个页面的滑动效果是统一的，即它们看起来是一个整体，如果使用GridView+ListView来实现的话，就不能保证一致的滑动效果，因为它们的滚动效果是分离的，所以这时就需要一个"胶水"，把这些彼此独立的可滚动widget（Sliver）"粘"起来，而CustomScrollView的功能就相当于“胶水”。')])])},[],!1,null,null,null);e.default=i.exports}}]);