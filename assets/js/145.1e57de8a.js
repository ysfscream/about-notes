(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{440:function(e,t,_){"use strict";_.r(t);var v=_(0),a=Object(v.a)({},function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"rest-api-规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rest-api-规范","aria-hidden":"true"}},[e._v("#")]),e._v(" REST API 规范")]),e._v(" "),_("blockquote",[_("p",[e._v("RESTful api -> "),_("strong",[e._v("URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。")])]),e._v(" "),_("p",[e._v("REST -- REpresentational State Transfer 直接翻译：表现层状态转移")])]),e._v(" "),_("p",[_("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/restful_api.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考1"),_("OutboundLink")],1)]),e._v(" "),_("p",[_("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014735914606943e2866257aa644b4bdfe01d26d29960b000",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考2"),_("OutboundLink")],1)]),e._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/jasonGeng88/blog/blob/master/201706/rest-api.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考3"),_("OutboundLink")],1)]),e._v(" "),_("p",[_("a",{attrs:{href:"https://hacpai.com/article/1552958044343",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考4"),_("OutboundLink")],1)]),e._v(" "),_("h2",{attrs:{id:"协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协议","aria-hidden":"true"}},[e._v("#")]),e._v(" 协议")]),e._v(" "),_("p",[e._v("API与用户的通信协议，总是使用"),_("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTPs协议"),_("OutboundLink")],1),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"域名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#域名","aria-hidden":"true"}},[e._v("#")]),e._v(" 域名")]),e._v(" "),_("p",[e._v("应该尽量将API部署在专用域名之下。")]),e._v(" "),_("div",{staticClass:"language-text extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("https://api.example.com\n")])])]),_("p",[e._v("如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("https://example.org/api/")])])]),e._v(" "),_("h2",{attrs:{id:"版本（versioning）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本（versioning）","aria-hidden":"true"}},[e._v("#")]),e._v(" 版本（Versioning）")]),e._v(" "),_("p",[e._v("应该将API的版本号放入URL。")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("https://api.example.com/v1/")])])]),e._v(" "),_("h2",{attrs:{id:"路径（endpoint）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路径（endpoint）","aria-hidden":"true"}},[e._v("#")]),e._v(" 路径（Endpoint）")]),e._v(" "),_("p",[e._v('路径又称"终点"（endpoint），表示API的具体网址。')]),e._v(" "),_("p",[e._v('在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的"集合"（collection），所以API中的名词也应该使用复数。')]),e._v(" "),_("p",[e._v("举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("https://api.example.com/v1/zoos")]),e._v(" "),_("code",[e._v("https://api.example.com/v1/animals")]),e._v(" "),_("code",[e._v("https://api.example.com/v1/employees")])])]),e._v(" "),_("h2",{attrs:{id:"过滤信息（filtering）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#过滤信息（filtering）","aria-hidden":"true"}},[e._v("#")]),e._v(" 过滤信息（Filtering）")]),e._v(" "),_("p",[e._v("如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。")]),e._v(" "),_("p",[e._v("下面是一些常见的参数。")]),e._v(" "),_("blockquote",[_("ul",[_("li",[e._v("?limit=10：指定返回记录的数量")]),e._v(" "),_("li",[e._v("?offset=10：指定返回记录的开始位置。")]),e._v(" "),_("li",[e._v("?page=2&per_page=100：指定第几页，以及每页的记录数。")]),e._v(" "),_("li",[e._v("?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。")]),e._v(" "),_("li",[e._v("?animal_type_id=1：指定筛选条件")])])]),e._v(" "),_("h2",{attrs:{id:"状态码（status-codes）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码（status-codes）","aria-hidden":"true"}},[e._v("#")]),e._v(" 状态码（Status Codes）")]),e._v(" "),_("p",[e._v("服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。")]),e._v(" "),_("blockquote",[_("ul",[_("li",[e._v("200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。")]),e._v(" "),_("li",[e._v("201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。")]),e._v(" "),_("li",[e._v("202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）")]),e._v(" "),_("li",[e._v("204 NO CONTENT - [DELETE]：用户删除数据成功。")]),e._v(" "),_("li",[e._v("400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。")]),e._v(" "),_("li",[e._v("401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。")]),e._v(" "),_("li",[e._v("403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。")]),e._v(" "),_("li",[e._v("404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。")]),e._v(" "),_("li",[e._v("406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。")]),e._v(" "),_("li",[e._v("410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。")]),e._v(" "),_("li",[e._v("422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。")]),e._v(" "),_("li",[e._v("500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。")])])]),e._v(" "),_("h2",{attrs:{id:"返回结果"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#返回结果","aria-hidden":"true"}},[e._v("#")]),e._v(" 返回结果")]),e._v(" "),_("p",[e._v("针对不同操作，服务器向用户返回的结果应该符合以下规范。")]),e._v(" "),_("blockquote",[_("ul",[_("li",[e._v("GET /collection：返回资源对象的列表（数组）")]),e._v(" "),_("li",[e._v("GET /collection/resource：返回单个资源对象")]),e._v(" "),_("li",[e._v("POST /collection：返回新生成的资源对象")]),e._v(" "),_("li",[e._v("PUT /collection/resource：返回完整的资源对象")]),e._v(" "),_("li",[e._v("PATCH /collection/resource：返回完整的资源对象")]),e._v(" "),_("li",[e._v("DELETE /collection/resource：返回一个空文档")])])]),e._v(" "),_("p",[e._v("编写REST API，实际上就是编写处理HTTP请求的async函数，不过，REST请求和普通的HTTP请求有几个特殊的地方：")]),e._v(" "),_("ol",[_("li",[e._v("REST请求仍然是标准的HTTP请求，但是，除了GET请求外，POST、PUT等请求的body是JSON数据格式，请求的"),_("code",[e._v("Content-Type")]),e._v("为"),_("code",[e._v("application/json")]),e._v("；")]),e._v(" "),_("li",[e._v("REST响应返回的结果是JSON数据格式，因此，响应的"),_("code",[e._v("Content-Type")]),e._v("也是"),_("code",[e._v("application/json")]),e._v("。")])]),e._v(" "),_("p",[_("code",[e._v("/static/")]),e._v("开头的URL是静态资源文件，类似的，"),_("code",[e._v("/api/")]),e._v("开头的URL就是REST AP")]),e._v(" "),_("p",[_("strong",[e._v("API 的参数永远是一个字符串")]),e._v(":")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("200 OK")]),e._v(" "),_("code",[e._v("GET")]),e._v(", "),_("code",[e._v("PUT")]),e._v(" 或 "),_("code",[e._v("POST")]),e._v(" 请求响应成功.\n"),_("code",[e._v("201 Created")]),e._v(" 标识一个新实例创建成功。当创建一个新的实例，请使用"),_("code",[e._v("POST")]),e._v("方法并返回"),_("code",[e._v("201")]),e._v("状态码。\n"),_("code",[e._v("304 Not Modified")]),e._v(" 发现资源已经缓存在本地，浏览器会自动减少请求次数。\n"),_("code",[e._v("400 Bad Request")]),e._v(" 请求未被处理，因为服务器不能理解客户端是要什么。\n"),_("code",[e._v("401 Unauthorized")]),e._v(" 因为请求缺少有效的凭据，应该使用所需的凭据重新发起请求。\n"),_("code",[e._v("403 Forbidden")]),e._v(" 意味着服务器理解本次请求，但拒绝授权。\n"),_("code",[e._v("404 Not Found")]),e._v(" 表示未找到请求的资源。\n"),_("code",[e._v("500 Internal Server Error")]),e._v(" 表示请求本身是有效，但由于某些意外情况，服务器无法实现，服务器发生了故障。")])])])},[],!1,null,null,null);t.default=a.exports}}]);